
ThermometerArduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e26  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce0  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046c  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dd  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006e  00000000  00000000  00002885  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000028f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 30       	cpi	r26, 0x00	; 0
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	62 c0       	rjmp	.+196    	; 0x1cc <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
#include <util/delay.h>


int main(void)
{
	init_tmp();
 10a:	19 d0       	rcall	.+50     	; 0x13e <init_tmp>
    /* Replace with your application code */
	DDRA = 0xff;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b11111111;
 110:	82 b9       	out	0x02, r24	; 2
    while (1) 
    {
		PORTA = 0b00000000;
 112:	12 b8       	out	0x02, r1	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	85 ea       	ldi	r24, 0xA5	; 165
 118:	9e e0       	ldi	r25, 0x0E	; 14
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x10>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x1a>
 124:	00 00       	nop
		_delay_ms(300);
		PORTA = 0b11111111;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	82 b9       	out	0x02, r24	; 2
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	85 ea       	ldi	r24, 0xA5	; 165
 12e:	9e e0       	ldi	r25, 0x0E	; 14
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x26>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x30>
 13a:	00 00       	nop
 13c:	ea cf       	rjmp	.-44     	; 0x112 <main+0x8>

0000013e <init_tmp>:

void init_tmp() {
	//Disabling the power reduction ADC bit, PRADC
	//So that it is possible to use the ADC input MUX
	//Disabling Power Reduction of Timer/Counter1, bit PRTIM1
	PRR0 &= ~(_BV(PRADC) | _BV(PRTIM1)) ;
 13e:	e4 e6       	ldi	r30, 0x64	; 100
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	86 7f       	andi	r24, 0xF6	; 246
 146:	80 83       	st	Z, r24
	//Setting the voltage reference (5V)
	ADMUX |= _BV(REFS0);
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
	//Adjust result to left - that will take the 8 MSB
	//to ADCH rather than to ADCL. As such precision is not needed.
	ADMUX |= _BV(ADLAR);
 152:	80 81       	ld	r24, Z
 154:	80 62       	ori	r24, 0x20	; 32
 156:	80 83       	st	Z, r24
	//Disable digital input as it is enabled by default
	//it will not be used as input.
	DDRK &= ~(_BV(PK7));
 158:	a7 e0       	ldi	r26, 0x07	; 7
 15a:	b1 e0       	ldi	r27, 0x01	; 1
 15c:	8c 91       	ld	r24, X
 15e:	8f 77       	andi	r24, 0x7F	; 127
 160:	8c 93       	st	X, r24
	DIDR0 |= _BV(ADC0D);
 162:	ae e7       	ldi	r26, 0x7E	; 126
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	8c 91       	ld	r24, X
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	8c 93       	st	X, r24
	//Input Channel Selection ADC15 - 
	//Can read from multiple channels, in that case is just one
	ADMUX |= _BV(MUX1) | _BV(MUX2) | _BV(MUX0);
 16c:	80 81       	ld	r24, Z
 16e:	87 60       	ori	r24, 0x07	; 7
 170:	80 83       	st	Z, r24
	ADMUX &= ~(_BV(MUX3) | _BV(MUX4));
 172:	80 81       	ld	r24, Z
 174:	87 7e       	andi	r24, 0xE7	; 231
 176:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 178:	ab e7       	ldi	r26, 0x7B	; 123
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	8c 91       	ld	r24, X
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	8c 93       	st	X, r24
	//MUX5..0 -> 100111
	//Selecting ADC prescaler - Set out the frequency ADC clock
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	87 60       	ori	r24, 0x07	; 7
 18a:	80 83       	st	Z, r24
	//ADATE - Enable Auto Trigger
	//ADIE - Interrupt Enable
	ADCSRA |= _BV(ADATE) | _BV(ADIE);
 18c:	80 81       	ld	r24, Z
 18e:	88 62       	ori	r24, 0x28	; 40
 190:	80 83       	st	Z, r24
	//Timer/Counter1 Compare Match B //Autro Trigger source selection (ADATE bit)
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 192:	8c 91       	ld	r24, X
 194:	85 60       	ori	r24, 0x05	; 5
 196:	8c 93       	st	X, r24
	//ADEN - Turn on Analog Digital Converter
	ADCSRA |= _BV(ADEN);
 198:	80 81       	ld	r24, Z
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	80 83       	st	Z, r24
	//ADSC - Starts the conversion of the input from ADC
	ADCSRA |= _BV(ADSC);
 19e:	80 81       	ld	r24, Z
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	80 83       	st	Z, r24
	//.Facial recognition setup
	OCR1B = 15625;
 1a4:	89 e0       	ldi	r24, 0x09	; 9
 1a6:	9d e3       	ldi	r25, 0x3D	; 61
 1a8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 1ac:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	//Selecting a clock source prescaler, in 
	//that case it is clk/1024, because 1 
	//second is tiny enough to use with 
	//this prescaler
	TCCR1A |= (_BV(COM1B1) | _BV(COM1B0));
 1b0:	e0 e8       	ldi	r30, 0x80	; 128
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 63       	ori	r24, 0x30	; 48
 1b8:	80 83       	st	Z, r24
	//Clock mode (CTC)
	TCCR1A |= _BV(WGM12);
 1ba:	80 81       	ld	r24, Z
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	80 83       	st	Z, r24
	//Enable Timer Interrupt Mask
	TIMSK1 |= _BV(OCIE1B);
 1c0:	ef e6       	ldi	r30, 0x6F	; 111
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
